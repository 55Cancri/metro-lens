schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

input LoginInput {
  username: String!
  password: String!
}

input VehicleInput {
  predictionGroupId: String!
}

input MapInput {
  route: String!
  direction: String!
}

type FavoriteStop {
  stopId: String!
  stopName: String!
  userLabel: String!
}

type Coordinate {
  lat: String
  lon: String
}

type User {
  uuid: ID!
  email: String!
  username: String!
  password: String!
  status: Boolean!
  dateCreated: String!
  lastSignOn: String!
  favoriteStops: [FavoriteStop]!
  locations: [Coordinate]!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Prediction {
  arrivalIn: String!
  arrivalTime: String!
  stopId: String!
  stopName: String!
}

type Vehicle {
  rt: String!
  vehicleId: String!
  destination: String!
  routeDirection: String!
  mph: String!
  lastLocation: Coordinate!
  currentLocation: Coordinate!
  lastUpdateTime: String!
  sourceTimestamp: String!
  predictions: [Prediction!]!
}

type Map {
  lat: String!
  lon: String!
  routeDirection: String!
  sequence: String!
  type: String!
  stopId: String
  stopName: String
}

type Test {
  name: String!
  age: String!
}

type Query {
  getUser(id: ID!): User
  getUsers: [User]
  getVehiclePositions: [Vehicle!]
  getMap(input: MapInput!): [Map]!
}

type Mutation {
  registerUser(input: RegisterInput!): LoginResponse!
  loginUser(input: LoginInput!): LoginResponse!
  updateVehiclePositions(input: VehicleInput!): [Vehicle!]
  testMutation: Test
}

type Subscription {
  onUpdateVehiclePositions: [Vehicle!]
    @aws_subscribe(mutations: ["updateVehiclePositions"])
  testedMutation: Test @aws_subscribe(mutations: ["testMutation"])
}
