schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

input LoginInput {
  username: String!
  password: String!
}

type FavoriteStop {
  stopId: String!
  stopName: String!
  userLabel: String!
}

type Location {
  lat: Int!
  lon: Int!
}

type User {
  uuid: ID!
  email: String!
  username: String!
  password: String!
  status: Boolean!
  dateCreated: String!
  lastSignOn: String!
  favoriteStops: [FavoriteStop]!
  locations: [Location]!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

# type Map {
# }

type Bus {
  # pk
  entity: String!
  # sk
  id: String!
  # data
  routes: String
}

type Test {
  name: String!
  age: String!
}

type Query {
  getUser(id: ID!): User
  getUsers: [User]
  # getMap: Map
}

type Mutation {
  registerUser(input: RegisterInput!): LoginResponse!
  loginUser(input: LoginInput!): LoginResponse!
  updateBusPositions: String
  testMutation: Test
}

type Subscription {
  updatedBusPositions: String @aws_subscribe(mutations: ["updateBusPositions"])
  testedMutation: Test @aws_subscribe(mutations: ["testMutation"])
}
